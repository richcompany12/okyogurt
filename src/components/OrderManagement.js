// src/components/OrderManagement.js
import React, { useState, useEffect } from 'react';
import { 
  collection, 
  query, 
  orderBy, 
  onSnapshot, 
  doc, 
  updateDoc
} from 'firebase/firestore';
import { db } from '../firebase';
import './OrderManagement.css';

function OrderManagement() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [deliveryTime, setDeliveryTime] = useState('');
  const [cancelReason, setCancelReason] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  // Î∞∞Îã¨ ÏãúÍ∞Ñ ÏòµÏÖò
  const deliveryTimeOptions = [
    { value: 5, label: '5Î∂Ñ' },
    { value: 10, label: '10Î∂Ñ' },
    { value: 15, label: '15Î∂Ñ' },
    { value: 20, label: '20Î∂Ñ' },
    { value: 30, label: '30Î∂Ñ' },
    { value: 40, label: '40Î∂Ñ' },
    { value: 50, label: '50Î∂Ñ' },
    { value: 60, label: '60Î∂Ñ' }
  ];

  useEffect(() => {
    // Ïã§ÏãúÍ∞Ñ Ï£ºÎ¨∏ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const q = query(
      collection(db, 'orders'),
      orderBy('createdAt', 'desc')
    );

    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const ordersList = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setOrders(ordersList);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  // Ï£ºÎ¨∏ ÏÉÅÌÉúÎ≥Ñ ÌïÑÌÑ∞
  const getOrdersByStatus = (status) => {
    return orders.filter(order => order.status === status);
  };

  // Ï£ºÎ¨∏ ÌôïÏù∏ Ï≤òÎ¶¨
  const handleConfirmOrder = async (order) => {
    if (!deliveryTime) {
      alert('Î∞∞Îã¨ ÏòàÏ†ï ÏãúÍ∞ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsProcessing(true);

    try {
      // Firestore Ï£ºÎ¨∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      await updateDoc(doc(db, 'orders', order.id), {
        status: 'confirmed',
        deliveryTime: parseInt(deliveryTime),
        confirmedAt: new Date(),
        estimatedDeliveryTime: new Date(Date.now() + parseInt(deliveryTime) * 60000)
      });

      // üÜï Í≥†Í∞ùÏóêÍ≤å Î∞∞Îã¨ ÏòàÏ†ï ÏãúÍ∞Ñ SMS Î∞úÏÜ°
await sendCustomerConfirmationSMS({
  phone: order.phone,
  deliveryTime: deliveryTime,
  orderNumber: order.orderNumber || order.id.slice(-6),
  storeName: order.storeName || 'ÏöîÍ±∞Ìä∏ÌçºÌîå'
});

      alert(`Ï£ºÎ¨∏Ïù¥ ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§. ${deliveryTime}Î∂Ñ ÌõÑ Î∞∞Îã¨ ÏòàÏ†ïÏûÖÎãàÎã§.`);
      setSelectedOrder(null);
      setDeliveryTime('');

    } catch (error) {
      console.error('Ï£ºÎ¨∏ ÌôïÏù∏ Ïò§Î•ò:', error);
      alert('Ï£ºÎ¨∏ ÌôïÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsProcessing(false);
    }
  };

// Í≥†Í∞ù Ï£ºÎ¨∏ ÌôïÏù∏ SMS Î∞úÏÜ° Ìï®Ïàò
const sendCustomerConfirmationSMS = async ({ phone, deliveryTime, orderNumber, storeName }) => {
  try {
    const SMS_ENDPOINT = 'https://sendtestsms-b245qv2hpq-uc.a.run.app';
    
    const customerMessage = `[${storeName}] Ï£ºÎ¨∏Ïù¥ ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§! üéâ

üìã Ï£ºÎ¨∏Î≤àÌò∏: ${orderNumber}
‚è∞ Î∞∞Îã¨ÏòàÏ†ï: ÏïΩ ${deliveryTime}Î∂Ñ ÌõÑ
üöö ÌòÑÏû¨ ÏùåÏãùÏùÑ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§

ÎßõÏûàÎäî ÏïÑÏù¥Ïä§ÌÅ¨Î¶ºÏùÑ Ï§ÄÎπÑÌï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§! üç¶`;

    const response = await fetch(SMS_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        to: phone.replace(/-/g, ''),
        message: customerMessage
      })
    });

    if (!response.ok) {
      throw new Error(`SMS API Ïò§Î•ò: ${response.status}`);
    }

    console.log('Í≥†Í∞ù Ï£ºÎ¨∏ÌôïÏù∏ SMS Î∞úÏÜ° ÏôÑÎ£å');
  } catch (error) {
    console.error('Í≥†Í∞ù SMS Î∞úÏÜ° Ïò§Î•ò:', error);
    // SMS Ïã§Ìå®Ìï¥ÎèÑ Ï£ºÎ¨∏ ÌôïÏù∏ÏùÄ Í≥ÑÏÜç ÏßÑÌñâ
  }
};

  // Ï£ºÎ¨∏ Ï∑®ÏÜå Ï≤òÎ¶¨
  const handleCancelOrder = async (order) => {
    if (!cancelReason.trim()) {
      alert('Ï∑®ÏÜå ÏÇ¨Ïú†Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsProcessing(true);

    try {
      // Firestore Ï£ºÎ¨∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      await updateDoc(doc(db, 'orders', order.id), {
        status: 'cancelled',
        cancelReason: cancelReason,
        cancelledAt: new Date()
      });

// Í≥†Í∞ù Ï£ºÎ¨∏ Ï∑®ÏÜå SMS Î∞úÏÜ° Ìï®Ïàò
const sendCustomerCancellationSMS = async ({ phone, orderNumber, cancelReason, storeName }) => {
  try {
    const SMS_ENDPOINT = 'https://sendtestsms-b245qv2hpq-uc.a.run.app';
    
    const customerMessage = `[${storeName}] Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§ üòî

üìã Ï£ºÎ¨∏Î≤àÌò∏: ${orderNumber}
‚ùå Ï∑®ÏÜå ÏÇ¨Ïú†: ${cancelReason}

Î∂àÌé∏ÏùÑ ÎìúÎ†§ Ï£ÑÏÜ°Ìï©ÎãàÎã§.
Îã§ÏùåÏóê Îçî Ï¢ãÏùÄ ÏÑúÎπÑÏä§Î°ú Ï∞æÏïÑÎµôÍ≤†ÏäµÎãàÎã§. üôè`;

    const response = await fetch(SMS_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        to: phone.replace(/-/g, ''),
        message: customerMessage
      })
    });

    if (!response.ok) {
      throw new Error(`SMS API Ïò§Î•ò: ${response.status}`);
    }

    console.log('Í≥†Í∞ù Ï£ºÎ¨∏Ï∑®ÏÜå SMS Î∞úÏÜ° ÏôÑÎ£å');
  } catch (error) {
    console.error('Í≥†Í∞ù Ï∑®ÏÜå SMS Î∞úÏÜ° Ïò§Î•ò:', error);
    // SMS Ïã§Ìå®Ìï¥ÎèÑ Ï£ºÎ¨∏ Ï∑®ÏÜåÎäî Í≥ÑÏÜç ÏßÑÌñâ
  }
};

      // Í≥†Í∞ùÏóêÍ≤å Ï£ºÎ¨∏ Ï∑®ÏÜå SMS Î∞úÏÜ°
await sendCustomerCancellationSMS({
  phone: order.phone,
  orderNumber: order.orderNumber || order.id.slice(-6),
  cancelReason: cancelReason,
  storeName: order.storeName || 'ÏöîÍ±∞Ìä∏ÌçºÌîå'
});

      alert('Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.');
      setSelectedOrder(null);
      setCancelReason('');

    } catch (error) {
      console.error('Ï£ºÎ¨∏ Ï∑®ÏÜå Ïò§Î•ò:', error);
      alert('Ï£ºÎ¨∏ Ï∑®ÏÜå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsProcessing(false);
    }
  };

  // Î∞∞Îã¨ ÏôÑÎ£å Ï≤òÎ¶¨
  const handleCompleteDelivery = async (order) => {
    setIsProcessing(true);

    try {
      await updateDoc(doc(db, 'orders', order.id), {
        status: 'completed',
        completedAt: new Date()
      });

      // TODO: Ìè¨Ïù∏Ìä∏ Ï†ÅÎ¶Ω Ï≤òÎ¶¨ (ÎÇòÏ§ëÏóê Íµ¨ÌòÑ)
      console.log('Ìè¨Ïù∏Ìä∏ Ï†ÅÎ¶Ω Ï≤òÎ¶¨:', order);

      alert('Î∞∞Îã¨Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');

    } catch (error) {
      console.error('Î∞∞Îã¨ ÏôÑÎ£å Ïò§Î•ò:', error);
      alert('Î∞∞Îã¨ ÏôÑÎ£å Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsProcessing(false);
    }
  };

  // ÌîÑÎ¶∞Ìä∏ Ìï®Ïàò Ï∂îÍ∞Ä
const handlePrintOrder = (order) => {
  const printWindow = window.open('', '_blank');
  printWindow.document.write(`
    <html>
      <head>
        <title>Ï£ºÎ¨∏ÏÑú - ${order.orderNumber}</title>
        <style>
          @page {
            size: 80mm auto;
            margin: 0;
            orientation: portrait;
          }
          
          @media print {
            @page {
              size: portrait;
              margin: 0;
            }
            
            body {
              transform: rotate(0deg);
              transform-origin: top left;
            }
          }
          
          body { 
            font-family: 'Courier New', monospace;
            font-size: 22px;
            font-weight: 900;
            line-height: 1.3;
            margin: 0;
            padding: 5mm;
            width: 70mm;
            color: #000000;
            background: white;
            -webkit-print-color-adjust: exact;
            print-color-adjust: exact;
          }
          
          .center { text-align: center; }
          .left { text-align: left; }
          .right { text-align: right; }
          .bold { font-weight: bold; }
          
          .header {
            text-align: center;
            border-bottom: 1px dashed #333;
            padding-bottom: 5px;
            margin-bottom: 8px;
          }
          
          .store-name {
            font-size: 28px;
            font-weight: 900;
            margin-bottom: 3px;
            color: #000000;
          }
          
          .section {
            margin: 8px 0;
            border-bottom: 1px dashed #ccc;
            padding-bottom: 5px;
          }
          
          .section:last-child {
            border-bottom: none;
          }
          
          .row {
            display: flex;
            justify-content: space-between;
            margin: 2px 0;
            font-size: 20px;
            font-weight: 700;
          }
          
          .menu-item {
            margin: 1px 0;
            font-size: 20px;
            font-weight: 700;
          }
          
          .total-row {
            font-weight: 900;
            font-size: 24px;
            border-top: 2px solid #000;
            padding-top: 3px;
            margin-top: 5px;
            color: #000000;
          }
          
          .customer-info {
            font-size: 20px;
            font-weight: 700;
            margin: 2px 0;
            color: #000000;
          }
          
          .special-requests {
            font-size: 10px;
            border: 1px solid #ccc;
            padding: 3px;
            margin: 5px 0;
            word-wrap: break-word;
          }
          
          .footer {
            text-align: center;
            font-size: 10px;
            margin-top: 10px;
            color: #666;
          }
        </style>
      </head>
      <body>
        <!-- Ìó§Îçî (ÏÉÅÏ†êÎ™Ö) -->
        <div class="header">
          <div class="store-name">üç¶ ${order.storeName || 'ÏöîÍ±∞Ìä∏ÌçºÌîå'}</div>
          <div>Ï£ºÎ¨∏Î≤àÌò∏: ${order.orderNumber || order.id.slice(-6)}</div>
        </div>

        <!-- Í≥†Í∞ù Ï†ïÎ≥¥ -->
        <div class="section">
          <div class="bold center">üìû Í≥†Í∞ù Ï†ïÎ≥¥</div>
          <div class="customer-info">Ï†ÑÌôî: ${order.phone}</div>
          ${order.tableNumber ? `<div class="customer-info">ÌÖåÏù¥Î∏î: ${order.tableNumber}</div>` : ''}
        </div>

        <!-- Ï£ºÎ¨∏ Î©îÎâ¥ (ÌïÑÏàò) -->
        <div class="section">
          <div class="bold center">üìã Ï£ºÎ¨∏ Î©îÎâ¥</div>
          ${order.items && order.items.length > 0 ? 
            order.items.map(item => 
              `<div class="menu-item">
                <div class="row">
                  <span>${item.name}</span>
                  <span>x${item.quantity}</span>
                </div>
                <div class="row">
                  <span>Îã®Í∞Ä: ${item.price?.toLocaleString()}Ïõê</span>
                  <span>${(item.price * item.quantity)?.toLocaleString()}Ïõê</span>
                </div>
              </div>`
            ).join('') 
            : '<div class="menu-item">Î©îÎâ¥ Ï†ïÎ≥¥ ÏóÜÏùå</div>'
          }
          
          <!-- Ï¥ùÏï° -->
          <div class="total-row">
            <div class="row">
              <span>Ï¥ù Í∏àÏï°</span>
              <span>${order.amount?.toLocaleString() || '0'}Ïõê</span>
            </div>
          </div>
        </div>

        <!-- Ï£ºÎ¨∏ ÏãúÍ∞Å -->
        <div class="section">
          <div class="bold center">‚è∞ Ï£ºÎ¨∏ Ï†ïÎ≥¥</div>
          <div class="customer-info">Ï£ºÎ¨∏ÏãúÍ∞Ñ: ${formatTime(order.createdAt)}</div>
          ${order.deliveryTime ? `<div class="customer-info">Î∞∞Îã¨ÏòàÏ†ï: ${order.deliveryTime}Î∂Ñ ÌõÑ</div>` : ''}
          ${order.status === 'paid' ? '<div class="customer-info">üí≥ Í≤∞Ï†úÏôÑÎ£å</div>' : ''}
        </div>

        <!-- ÏöîÏ≤≠ÏÇ¨Ìï≠ (ÏûàÏùÑ Í≤ΩÏö∞Îßå) -->
        ${order.specialRequests ? `
        <div class="section">
          <div class="bold center">üìù ÏöîÏ≤≠ÏÇ¨Ìï≠</div>
          <div class="special-requests">${order.specialRequests}</div>
        </div>
        ` : ''}

        <!-- Ìë∏ÌÑ∞ -->
        <div class="footer">
          <div>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</div>
          <div>ÎßõÏûàÍ≤å ÎìúÏÑ∏Ïöî! üç¶</div>
          <div>${new Date().toLocaleString('ko-KR')}</div>
        </div>
      </body>
    </html>
  `);
  
  printWindow.document.close();
  
  // ÌîÑÎ¶∞Ìä∏ Ïã§Ìñâ
  printWindow.onload = function() {
    printWindow.print();
    printWindow.close();
  };
};


// formatTime Ìï®ÏàòÎèÑ Í∞ôÏù¥ ÏÇ¨Ïö© (Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú ÎëêÏÑ∏Ïöî)
const formatTime = (timestamp) => {
  if (!timestamp) return '';
  const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
  return date.toLocaleString('ko-KR', {
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};

 const getStatusBadge = (status) => {
  const statusMap = {
    pending: { text: 'ÎåÄÍ∏∞Ï§ë', class: 'status-pending' },
    paid: { text: 'Í≤∞Ï†úÏôÑÎ£å', class: 'status-paid' },      // üÜï Ïù¥ Ï§Ñ Ï∂îÍ∞Ä
    confirmed: { text: 'ÌôïÏù∏Îê®', class: 'status-confirmed' },
    cancelled: { text: 'Ï∑®ÏÜåÎê®', class: 'status-cancelled' },
    completed: { text: 'ÏôÑÎ£åÎê®', class: 'status-completed' }
  };
    
    const statusInfo = statusMap[status] || { text: status, class: 'status-unknown' };
    return <span className={`status-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  if (loading) {
    return <div className="loading">Ï£ºÎ¨∏ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</div>;
  }

  const pendingOrders = getOrdersByStatus('pending');
  const paidOrders = getOrdersByStatus('paid');  
  const confirmedOrders = getOrdersByStatus('confirmed');
  const newOrders = [...paidOrders, ...pendingOrders];
  const recentOrders = orders.slice(0, 10);

  return (
    <div className="order-management">
      <div className="management-header">
        <h1>üìã Ï£ºÎ¨∏ Í¥ÄÎ¶¨</h1>
        <div className="order-stats">
          <div className="stat-item">
  <span className="stat-number">{newOrders.length}</span>
  <span className="stat-label">Ï≤òÎ¶¨ÎåÄÍ∏∞</span>
</div>
          <div className="stat-item">
            <span className="stat-number">{confirmedOrders.length}</span>
            <span className="stat-label">ÏßÑÌñâ Ï§ë</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{orders.length}</span>
            <span className="stat-label">Ï¥ù Ï£ºÎ¨∏</span>
          </div>
        </div>
      </div>

      {/* ÎåÄÍ∏∞ Ï§ëÏù∏ Ï£ºÎ¨∏ */}
     {newOrders.length > 0 && (
  <div className="order-section">
    <h2>üîî ÏÉàÎ°úÏö¥ Ï£ºÎ¨∏ ({newOrders.length}Í∞ú)</h2>
    <div className="orders-grid">
      {newOrders.map(order => (
              <div key={order.id} className="order-card urgent">
                <div className="order-header">
                  <span className="order-id">#{order.orderNumber || order.id.slice(-6)}</span>
                  {getStatusBadge(order.status)}
                  <button 
                    onClick={() => handlePrintOrder(order)}
                    className="btn-print"
                    title="ÌîÑÎ¶∞Ìä∏"
                  >
                    üñ®Ô∏è
                  </button>
                </div>
                
                {/* ÏÉÅÏ†ê Ï†ïÎ≥¥ Ï∂îÍ∞Ä */}
                {order.storeName && (
                  <div className="store-info">
                    <span className="store-name">üè™ {order.storeName}</span>
                  </div>
                )}
                
                <div className="order-details">
                  <div className="detail-row">
                    <span className="label">Í∏àÏï°:</span>
                    <span className="value">{order.amount?.toLocaleString()}Ïõê</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">Ï†ÑÌôîÎ≤àÌò∏:</span>
                    <span className="value">{order.phone}</span>
                  </div>
                  {/* ÏàòÏ†ï: tableInfo ‚Üí tableNumber */}
                  {order.tableNumber && (
                    <div className="detail-row">
                      <span className="label">ÌÖåÏù¥Î∏î:</span>
                      <span className="value">{order.tableNumber}</span>
                    </div>
                  )}
                  {/* ÏàòÏ†ï: request ‚Üí specialRequests */}
                  {order.specialRequests && (
                    <div className="detail-row">
                      <span className="label">ÏöîÏ≤≠ÏÇ¨Ìï≠:</span>
                      <span className="value">{order.specialRequests}</span>
                    </div>
                  )}
                  {/* Î©îÎâ¥ Ï†ïÎ≥¥ Ï∂îÍ∞Ä */}
                  {order.items && order.items.length > 0 && (
                    <div className="detail-row">
                      <span className="label">Î©îÎâ¥:</span>
                      <span className="value">
                        {order.items.map(item => `${item.name}√ó${item.quantity}`).join(', ')}
                      </span>
                    </div>
                  )}
                  <div className="detail-row">
                    <span className="label">Ï£ºÎ¨∏ÏãúÍ∞Ñ:</span>
                    <span className="value">{formatTime(order.createdAt)}</span>
                  </div>
                </div>

                <div className="order-actions">
                  <button 
                    onClick={() => setSelectedOrder(order)}
                    className="btn-confirm"
                  >
                    Ï£ºÎ¨∏ ÌôïÏù∏
                  </button>
                  <button 
                    onClick={() => {
                      setSelectedOrder(order);
                      setCancelReason('');
                    }}
                    className="btn-cancel"
                  >
                    Ï£ºÎ¨∏ Ï∑®ÏÜå
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* ÏßÑÌñâ Ï§ëÏù∏ Ï£ºÎ¨∏ */}
      {confirmedOrders.length > 0 && (
        <div className="order-section">
          <h2>üöö Î∞∞Îã¨ ÏßÑÌñâ Ï§ë ({confirmedOrders.length}Í∞ú)</h2>
          <div className="orders-grid">
            {confirmedOrders.map(order => (
              <div key={order.id} className="order-card">
                <div className="order-header">
                  <span className="order-id">#{order.orderNumber || order.id.slice(-6)}</span>
                  {getStatusBadge(order.status)}
                  <button 
                    onClick={() => handlePrintOrder(order)}
                    className="btn-print"
                    title="ÌîÑÎ¶∞Ìä∏"
                  >
                    üñ®Ô∏è
                  </button>
                </div>

                {/* ÏÉÅÏ†ê Ï†ïÎ≥¥ Ï∂îÍ∞Ä */}
                {order.storeName && (
                  <div className="store-info">
                    <span className="store-name">üè™ {order.storeName}</span>
                  </div>
                )}
                
                <div className="order-details">
                  <div className="detail-row">
                    <span className="label">Í∏àÏï°:</span>
                    <span className="value">{order.amount?.toLocaleString()}Ïõê</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">Ï†ÑÌôîÎ≤àÌò∏:</span>
                    <span className="value">{order.phone}</span>
                  </div>
                  {order.tableNumber && (
                    <div className="detail-row">
                      <span className="label">ÌÖåÏù¥Î∏î:</span>
                      <span className="value">{order.tableNumber}</span>
                    </div>
                  )}
                  {order.items && order.items.length > 0 && (
                    <div className="detail-row">
                      <span className="label">Î©îÎâ¥:</span>
                      <span className="value">
                        {order.items.map(item => `${item.name}√ó${item.quantity}`).join(', ')}
                      </span>
                    </div>
                  )}
                  <div className="detail-row">
                    <span className="label">Î∞∞Îã¨ÏòàÏ†ï:</span>
                    <span className="value">{order.deliveryTime}Î∂Ñ</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">ÌôïÏù∏ÏãúÍ∞Ñ:</span>
                    <span className="value">{formatTime(order.confirmedAt)}</span>
                  </div>
                </div>

                <div className="order-actions">
                  <button 
                    onClick={() => handleCompleteDelivery(order)}
                    disabled={isProcessing}
                    className="btn-complete"
                  >
                    Î∞∞Îã¨ ÏôÑÎ£å
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* ÏµúÍ∑º Ï£ºÎ¨∏ ÎÇ¥Ïó≠ */}
      <div className="order-section">
        <h2>üìä ÏµúÍ∑º Ï£ºÎ¨∏ ÎÇ¥Ïó≠</h2>
        <div className="orders-table">
          <div className="table-header">
            <span>Ï£ºÎ¨∏Î≤àÌò∏</span>
            <span>ÏÉÅÏ†ê</span>
            <span>Í∏àÏï°</span>
            <span>Ï†ÑÌôîÎ≤àÌò∏</span>
            <span>ÏÉÅÌÉú</span>
            <span>Ï£ºÎ¨∏ÏãúÍ∞Ñ</span>
            <span>Ïï°ÏÖò</span>
          </div>
          {recentOrders.map(order => (
            <div key={order.id} className="table-row">
              <span>#{order.orderNumber || order.id.slice(-6)}</span>
              <span>{order.storeName || 'Ï†ïÎ≥¥ÏóÜÏùå'}</span>
              <span>{order.amount?.toLocaleString()}Ïõê</span>
              <span>{order.phone}</span>
              <span>{getStatusBadge(order.status)}</span>
              <span>{formatTime(order.createdAt)}</span>
              <span>
                <button 
                  onClick={() => handlePrintOrder(order)}
                  className="btn-print-small"
                  title="ÌîÑÎ¶∞Ìä∏"
                >
                  üñ®Ô∏è
                </button>
              </span>
            </div>
          ))}
        </div>
      </div>

      {/* Ï£ºÎ¨∏ Ï≤òÎ¶¨ Î™®Îã¨ */}
      {selectedOrder && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>Ï£ºÎ¨∏ Ï≤òÎ¶¨</h3>
              <button 
                onClick={() => {
                  setSelectedOrder(null);
                  setDeliveryTime('');
                  setCancelReason('');
                }}
                className="modal-close"
              >
                ‚úï
              </button>
            </div>

            <div className="modal-content">
              <div className="order-summary">
                <h4>Ï£ºÎ¨∏ Ï†ïÎ≥¥</h4>
                <p>Ï£ºÎ¨∏Î≤àÌò∏: #{selectedOrder.orderNumber || selectedOrder.id.slice(-6)}</p>
                {selectedOrder.storeName && <p>ÏÉÅÏ†ê: {selectedOrder.storeName}</p>}
                <p>Í∏àÏï°: {selectedOrder.amount?.toLocaleString()}Ïõê</p>
                <p>Ï†ÑÌôîÎ≤àÌò∏: {selectedOrder.phone}</p>
                {selectedOrder.tableNumber && <p>ÌÖåÏù¥Î∏î: {selectedOrder.tableNumber}</p>}
                {selectedOrder.specialRequests && <p>ÏöîÏ≤≠ÏÇ¨Ìï≠: {selectedOrder.specialRequests}</p>}
                {selectedOrder.items && selectedOrder.items.length > 0 && (
                  <div>
                    <p><strong>Ï£ºÎ¨∏ Î©îÎâ¥:</strong></p>
                    <ul>
                      {selectedOrder.items.map((item, index) => (
                        <li key={index}>{item.name} x{item.quantity} - {(item.price * item.quantity).toLocaleString()}Ïõê</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              <div className="action-buttons">
                <div className="confirm-section">
                  <h4>Ï£ºÎ¨∏ ÌôïÏù∏</h4>
                  <select 
                    value={deliveryTime} 
                    onChange={(e) => setDeliveryTime(e.target.value)}
                  >
                    <option value="">Î∞∞Îã¨ ÏãúÍ∞Ñ ÏÑ†ÌÉù</option>
                    {deliveryTimeOptions.map(option => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                  <button 
                    onClick={() => handleConfirmOrder(selectedOrder)}
                    disabled={isProcessing || !deliveryTime}
                    className="btn-confirm"
                  >
                    {isProcessing ? 'Ï≤òÎ¶¨ Ï§ë...' : 'Ï£ºÎ¨∏ ÌôïÏù∏'}
                  </button>
                </div>

                <div className="cancel-section">
                  <h4>Ï£ºÎ¨∏ Ï∑®ÏÜå</h4>
                  <textarea
                    value={cancelReason}
                    onChange={(e) => setCancelReason(e.target.value)}
                    placeholder="Ï∑®ÏÜå ÏÇ¨Ïú†Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                    rows="3"
                  />
                  <button 
                    onClick={() => handleCancelOrder(selectedOrder)}
                    disabled={isProcessing || !cancelReason.trim()}
                    className="btn-cancel"
                  >
                    {isProcessing ? 'Ï≤òÎ¶¨ Ï§ë...' : 'Ï£ºÎ¨∏ Ï∑®ÏÜå'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default OrderManagement;